{
  "name": "Incu_Vietnam-action",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2024-06-05T17:45:16.584Z",
  "updated": "2024-06-10T03:59:36.276Z",
  "language": "en",
  "skill_id": "0e114e5c-178d-4959-a792-deac4f66744c",
  "workspace": {
    "actions": [
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_649",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Welcome to QnA Assistant, what can I help you?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential",
                  "repeat_on_reprompt": false
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "scalar": 0
                  },
                  "skill_variable": "q_number"
                }
              ]
            },
            "handlers": [
              {
                "type": "not_found",
                "title": "validation_not_found_handler",
                "output": {
                  "generic": [
                    {
                      "values": [
                        {
                          "text_expression": {
                            "concat": [
                              {
                                "scalar": "I'm sorry, I did not catch that, please restate your response."
                              }
                            ]
                          }
                        }
                      ],
                      "response_type": "text",
                      "selection_policy": "incremental"
                    }
                  ]
                },
                "handler": "validation_not_found_handler",
                "resolver": {
                  "type": "prompt_again"
                },
                "next_handler": "validation_not_found_max_tries_handler"
              },
              {
                "type": "not_found_max_tries",
                "title": "validation_not_found_max_tries_handler",
                "handler": "validation_not_found_max_tries_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "question": {
              "free_text": true,
              "allow_topic_switch": false,
              "collect_verbatim_response": false,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_649",
            "next_step": "step_408"
          },
          {
            "step": "step_408",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "user_quesiton"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_649"
                  },
                  "skill_variable": "user_input"
                },
                {
                  "value": {
                    "expression": "\"\""
                  },
                  "skill_variable": "conversation_history"
                },
                {
                  "value": {
                    "scalar": 1
                  },
                  "skill_variable": "q_number"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/ml/v4/deployments/226dc1b6-54a4-4f71-b35b-f436158d1bc2/predictions",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "4846cbf69ae2da440d3b829be44e015170e58db1bcd3099d623ae3315497a0d1",
                  "catalog_item_id": "387f6c69-6695-40ea-80af-e63fcddec77b"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "expression": "[{\n        \"fields\": [\"query\"],\n        \"values\": [[{\"question\":${user_input}, \"conversation_history\":${conversation_history}}]]\n}]"
                      },
                      "parameter": "input_data"
                    }
                  ],
                  "query": [
                    {
                      "value": {
                        "scalar": "2021-05-01"
                      },
                      "parameter": "version"
                    }
                  ]
                },
                "result_variable": "step_408_result_1"
              }
            },
            "variable": "step_408",
            "condition": {
              "eq": [
                {
                  "skill_variable": "q_number"
                },
                {
                  "scalar": 0
                }
              ]
            },
            "next_step": "step_375"
          },
          {
            "step": "step_375",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "qa_result"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_408_result_1.body.predictions}"
                  },
                  "skill_variable": "result"
                },
                {
                  "value": {
                    "expression": "${result}[0].values[0].process_result[0].qa_result.result.answer"
                  },
                  "skill_variable": "qa_result"
                },
                {
                  "value": {
                    "expression": "${result}[0].values[0].process_result[0].conversation_history"
                  },
                  "skill_variable": "conversation_info"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_375",
            "condition": {
              "eq": [
                {
                  "skill_variable": "q_number"
                },
                {
                  "scalar": "1"
                }
              ]
            },
            "next_step": "step_370"
          },
          {
            "step": "step_370",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "null"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "\"\""
                  },
                  "skill_variable": "null"
                }
              ]
            },
            "handlers": [],
            "question": {
              "free_text": true,
              "allow_topic_switch": false,
              "collect_verbatim_response": false,
              "response_collection_behavior": "always_ask"
            },
            "resolver": {
              "type": "continue"
            },
            "variable": "step_370",
            "condition": {
              "eq": [
                {
                  "skill_variable": "q_number"
                },
                {
                  "scalar": "1"
                }
              ]
            },
            "next_step": "step_108"
          },
          {
            "step": "step_108",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_370"
                  },
                  "skill_variable": "user_input"
                },
                {
                  "value": {
                    "scalar": 1
                  },
                  "skill_variable": "q_number"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/ml/v4/deployments/226dc1b6-54a4-4f71-b35b-f436158d1bc2/predictions",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "4846cbf69ae2da440d3b829be44e015170e58db1bcd3099d623ae3315497a0d1",
                  "catalog_item_id": "387f6c69-6695-40ea-80af-e63fcddec77b"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "expression": "[{\n        \"fields\": [\"query\"],\n        \"values\": [[{\"question\":${user_input}, \"conversation_history\":${conversation_info}}]]\n}]"
                      },
                      "parameter": "input_data"
                    }
                  ],
                  "query": [
                    {
                      "value": {
                        "scalar": "2021-05-01"
                      },
                      "parameter": "version"
                    }
                  ]
                },
                "result_variable": "step_108_result_1"
              }
            },
            "variable": "step_108",
            "condition": {
              "eq": [
                {
                  "skill_variable": "q_number"
                },
                {
                  "scalar": "1"
                }
              ]
            },
            "next_step": "step_166"
          },
          {
            "step": "step_166",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "skill_variable": "qa_result"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "${step_108_result_1.body.predictions}"
                  },
                  "skill_variable": "result"
                },
                {
                  "value": {
                    "expression": "${step_108_result_1.body.predictions}[0].values[0].process_result[0].qa_result.result.answer"
                  },
                  "skill_variable": "qa_result"
                },
                {
                  "value": {
                    "expression": "${step_108_result_1.body.predictions}[0].values[0].process_result[0].conversation_history"
                  },
                  "skill_variable": "conversation_history"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "replay",
              "clear": [
                {
                  "variable": "step_370"
                },
                {
                  "variable": "step_108"
                }
              ]
            },
            "variable": "step_166",
            "condition": {
              "eq": [
                {
                  "skill_variable": "q_number"
                },
                {
                  "scalar": "1"
                }
              ]
            }
          }
        ],
        "title": "QnA",
        "action": "action_25414-2",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_25414_intent_37286-2"
        },
        "variables": [
          {
            "title": "No response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_108",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_108_result_1",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": true
            },
            "variable": "step_166",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": true
            },
            "variable": "step_370",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": false
            },
            "variable": "step_375",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": false
            },
            "variable": "step_408",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_408_result_1",
            "data_type": "any"
          },
          {
            "title": "Welcome to QnA Assistant, what can I help you?",
            "privacy": {
              "enabled": false
            },
            "variable": "step_649",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_558",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": null,
                "policy": "default",
                "parameters": null,
                "result_variable": "step_558_result_1"
              }
            },
            "variable": "step_558",
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. Please rephrase your question."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001",
            "condition": {
              "lte": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": ""
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "fallback",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_002_result_1"
              }
            },
            "variable": "step_002",
            "condition": {
              "gt": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            }
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "I am afraid I do not understand what you are asking, please re-p",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "variable": "step_002_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "variable": "step_558",
            "data_type": "any"
          },
          {
            "variable": "step_558_result_1",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Let me do a quick search"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action",
              "invoke_action": {
                "action": null,
                "policy": "default",
                "parameters": null,
                "result_variable": "step_001_result_2"
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Let me do a quick search"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "Let me do a quick search",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_001_result_2",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "Let me do a quick search",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "## **Ask Anything!**\nWelcome to Bank of xx!\n\n<br />\n\n\n\nMay I help you?"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "title": "## **Ask Anything!** Welcome to Bank of xx! <br /> May I help yo",
            "privacy": {
              "enabled": false
            },
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_25414-2",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_25414_intent_37286-2",
        "examples": [
          {
            "text": "Flower Document"
          }
        ]
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "3_qns",
        "variable": "3_qns",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "conversation_history",
        "variable": "conversation_history",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "conversation_info",
        "variable": "conversation_info",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "discovery_date_version",
        "variable": "discovery_date_version",
        "data_type": "any",
        "description": "Discovery date versions are documented in the release notes (https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-release-notes).",
        "initial_value": {
          "scalar": "2022-08-01"
        }
      },
      {
        "title": "discovery_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "discovery_project_id",
        "data_type": "string",
        "description": "You MUST set this value to the project ID of the Discovery project containing your data",
        "initial_value": {
          "scalar": "3a6a9c23-9275-45b6-bbe0-8cd34cfb22b1"
        }
      },
      {
        "title": "last_1_inputs",
        "variable": "last_2_inputs",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "model_id",
        "privacy": {
          "enabled": false
        },
        "variable": "model_id",
        "data_type": "string",
        "description": "The ID of the model to be used for this user prompt.",
        "initial_value": {
          "scalar": "meta-llama/llama-3-70b-instruct"
        }
      },
      {
        "title": "model_input",
        "variable": "model_input",
        "data_type": "string",
        "description": "input to the watsonx model"
      },
      {
        "title": "model_parameters_max_new_tokens",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_max_new_tokens",
        "data_type": "number",
        "description": "The maximum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 500
        }
      },
      {
        "title": "model_parameters_min_new_tokens",
        "variable": "model_parameters_min_new_tokens",
        "data_type": "number",
        "description": "The minimum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_repetition_penalty",
        "variable": "model_parameters_repetition_penalty",
        "data_type": "number",
        "description": "",
        "initial_value": {
          "scalar": 1.1
        }
      },
      {
        "title": "model_parameters_stop_sequences",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_stop_sequences",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "model_parameters_temperature",
        "variable": "model_parameters_temperature",
        "data_type": "number",
        "description": "he value used to control the next token probabilities. The range is from 0.05 to 1.00; 0.05 makes it mostly deterministic.",
        "initial_value": {
          "scalar": 0
        }
      },
      {
        "title": "model_response",
        "variable": "model_response",
        "data_type": "string",
        "description": "The text generated by the model in response to the model input"
      },
      {
        "title": "null",
        "privacy": {
          "enabled": false
        },
        "variable": "null",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "passages",
        "variable": "passages",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "prompt",
        "privacy": {
          "enabled": false
        },
        "variable": "prompt",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "qa_result",
        "variable": "qa_result",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "q_number",
        "variable": "q_number",
        "data_type": "number",
        "description": "",
        "initial_value": {
          "scalar": 0
        }
      },
      {
        "title": "query_text",
        "variable": "query_text",
        "data_type": "any",
        "description": "You MAY change this to pass queries to Watson Discovery. By default the Search action passes the user’s input.text directly."
      },
      {
        "title": "query_text_answer",
        "privacy": {
          "enabled": false
        },
        "variable": "query_text_answer",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "response",
        "privacy": {
          "enabled": false
        },
        "variable": "response",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "result",
        "variable": "result",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "retrieval_result",
        "privacy": {
          "enabled": false
        },
        "variable": "retrieval_result",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "search_results",
        "variable": "search_results",
        "data_type": "any",
        "description": "Response object from Discovery query (https://cloud.ibm.com/apidocs/discovery-data#query)."
      },
      {
        "title": "snippet",
        "variable": "snippet",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "to_fadly_answer",
        "privacy": {
          "enabled": false
        },
        "variable": "to_fadly_answer",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "url_link",
        "variable": "url_link",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "user_input",
        "variable": "user_input",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "user_quesiton",
        "privacy": {
          "enabled": false
        },
        "variable": "user_quesiton",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "user_question",
        "variable": "user_question",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "verbose",
        "variable": "verbose",
        "data_type": "boolean",
        "description": "Prints debug output when true",
        "initial_value": {
          "scalar": false
        }
      },
      {
        "title": "watsonx_api_version",
        "variable": "watsonx_api_version",
        "data_type": "any",
        "description": "The version of the watsonx api (required)",
        "initial_value": {
          "scalar": "2023-05-29"
        }
      },
      {
        "title": "watsonx_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "watsonx_project_id",
        "data_type": "any",
        "description": "You MUST set this to your watsonx project id",
        "initial_value": {
          "scalar": "91340ff3-d9e8-4f93-bed4-fca896e5849e"
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "nlp": {
        "model": "latest"
      },
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "launch_mode": {
        "default": "learning",
        "enabled": false,
        "learning": {
          "step_retry_threshold": 2,
          "use_connect_to_support": "more_often",
          "single_answer_clarification": "more_often",
          "disambiguation_clarification": "more_often"
        },
        "confident": {
          "step_retry_threshold": 4,
          "use_connect_to_support": "sometimes",
          "single_answer_clarification": "sometimes",
          "disambiguation_clarification": "sometimes"
        },
        "no_action_matches": "more_often"
      },
      "topic_switch": {
        "enabled": false,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "generative_ai": {
        "slot_filling": {
          "enabled": false
        },
        "general_purpose_answering": {
          "enabled": false
        }
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": false,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": false
    },
    "learning_opt_out": true
  },
  "description": "created for assistant 1c76effb-2430-4334-8897-6cdad3c6282b",
  "assistant_id": "422fdca4-c589-4aaf-91f5-9ef3d4c0390a",
  "workspace_id": "0e114e5c-178d-4959-a792-deac4f66744c",
  "dialog_settings": {},
  "next_snapshot_version": "1",
  "environment_id": "5efad0b7-eebc-48ad-a781-241be6379a66"
}